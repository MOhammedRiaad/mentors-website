{"version":3,"sources":["controllers/mentor-card/MentorCard.js","controllers/mentor-filter/MentorFilter.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","avatar","width","spacing","height","backgroundColor","cardAction","display","justifyContent","padding","MentorCard","props","classes","mentor","useState","fav","setFav","Card","className","CardHeader","Avatar","src","image","aria-label","name","action","countryAlpha2Code","alt","title","subheader","CardContent","Typography","variant","message","Grid","container","justify","skills","map","skill","index","key","item","Chip","label","Divider","CardActions","disableSpacing","Button","href","color","IconButton","onClick","margin","arabCountries","EG","DZ","SD","IQ","MA","SA","YE","SY","TN","JO","AE","LB","LY","PS","OM","KW","MR","QA","BH","DJ","KM","MentorFilter","mentors","Set","flat","filteredCountries","console","log","countries","country","value","noValidate","autoComplete","TextField","id","select","helperText","MenuItem","App","mentorsList","md","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a9edce06.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  CardHeader,\r\n  IconButton,\r\n  Typography,\r\n  Avatar,\r\n  Chip,\r\n  Grid,\r\n  Divider,\r\n  Button,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport FavoriteBorderOutlinedIcon from \"@material-ui/icons/FavoriteBorderOutlined\";\r\nimport FavoriteOutlinedIcon from \"@material-ui/icons/FavoriteOutlined\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 280,\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(8),\r\n    height: theme.spacing(8),\r\n    backgroundColor: '#e45',\r\n  },\r\n  cardAction: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",  \r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nconst MentorCard = (props) => {\r\n  const classes = useStyles();\r\n  const { mentor } = props;\r\n  const [fav, setFav] = useState(false);\r\n  const toggleMentorFav = () => {\r\n    setFav(!fav);\r\n  };\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar src={mentor.image} aria-label=\"mentor\" className={classes.avatar}>\r\n            {mentor.name[0]}\r\n          </Avatar>\r\n        }\r\n        action={\r\n          <img\r\n            src={`https://www.countryflags.io/${mentor.countryAlpha2Code}/flat/32.png`}\r\n            alt=\"\"\r\n          />\r\n        }\r\n        title={mentor.name}\r\n        subheader={mentor.title}\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body2\">\"{mentor.message}\"</Typography>\r\n      </CardContent>\r\n      <CardContent>\r\n        <Grid container justify=\"center\" spacing={1}>\r\n          {mentor.skills.map((skill, index) => (\r\n            <Grid key={index} item>\r\n              <Chip label={skill} variant=\"outlined\" />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider variant=\"fullWidth\" />\r\n      <CardActions className={classes.cardAction} disableSpacing>\r\n        <Button href=\"#connect-mentor\" color=\"primary\">\r\n          Connect\r\n        </Button>\r\n        <IconButton onClick={toggleMentorFav}>\r\n          {fav ? <FavoriteOutlinedIcon color=\"secondary\" /> : <FavoriteBorderOutlinedIcon />}\r\n        </IconButton>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MentorCard;\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiTextField-root\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst arabCountries = {\r\n    EG: \"Egypt\",\r\n    DZ: \"Algeria\",\r\n    SD: \"Sudan\",\r\n    IQ: \"Iraq\",\r\n    MA: \"Morocco\",\r\n    SA: \"Saudi Arabia\",\r\n    YE: \"Yemen\",\r\n    SY: \"Syria\",\r\n    TN: \"Tunisia\",\r\n    JO: \"Jordan\",\r\n    AE: \"United Arab Emirates\",\r\n    LB: \"Lebanon\",\r\n    LY: \"Libya\",\r\n    PS: \"Palestine\",\r\n    OM: \"Oman\",\r\n    KW: \"Kuwait\",\r\n    MR: \"Mauritania\",\r\n    QA: \"Qatar\",\r\n    BH: \"Bahrain\",\r\n    DJ: \"Djibouti\",\r\n    KM: \"Comoros\",\r\n}\r\nconst MentorFilter = (props) => {\r\n  const classes = useStyles();\r\n  const { mentors } = props;\r\n  //creating a unique skills array.\r\n  const skills = [...new Set(mentors.map(mentor => mentor.skills).flat())];\r\n  const filteredCountries = [...new Set(mentors.map(mentor => mentor.countryAlpha2Code))]\r\n  console.log(filteredCountries)\r\n  const countries = (filteredCountries.map(country => {\r\n      return {\r\n        value: country,\r\n        label: arabCountries[country]\r\n      }\r\n      \r\n      /* label: mentor.country, */\r\n  }));\r\n  console.log(countries)\r\n  return (\r\n    <form className={classes.root} noValidate autoComplete=\"off\">\r\n      <div>\r\n        {/*FILTER BY SKILLS */}\r\n        <TextField\r\n          id=\"standard-select-currency\"\r\n          select\r\n          label=\"Skill\"\r\n          /* value={currency}\r\n          onChange={handleChange} */\r\n          helperText=\"filter mentors by skills\"\r\n        >\r\n          {skills.map((skill) => (\r\n            <MenuItem key={skill} value={skill}>\r\n              {skill}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n        {/*FILTER BY COUNTRY */}\r\n        <TextField\r\n          id=\"standard-select-currency\"\r\n          select\r\n          label=\"country\"\r\n          /* value={currency}\r\n          onChange={handleChange} */\r\n          helperText=\"filter mentors by country\"\r\n        >\r\n          {countries.map((country) => (\r\n            <MenuItem key={country.value} value={country.value}>\r\n              {country.label}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MentorFilter;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MentorCard from \"./controllers/mentor-card/MentorCard\";\r\nimport MentorFilter from \"./controllers/mentor-filter/MentorFilter\";\r\nimport mentorsList from \"./data/mentors.json\"\r\n\r\nfunction App() {\r\n  const [mentors, setMentors] = useState(mentorsList)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Mentors Website</h1>\r\n      <Grid container spacing={2}>\r\n        <Grid container item  md={2}>\r\n          <MentorFilter mentors={mentors} />\r\n        </Grid>\r\n        <Grid container item  md={10} spacing={2} justify=\"flex-start\">\r\n          {mentors.map((mentor, index) => (\r\n            <Grid key={index} item>\r\n              <MentorCard mentor={mentor} />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}